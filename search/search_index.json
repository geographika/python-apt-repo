{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python-apt-repo Python library to query APT repositories. Example from apt_repo import APTSources, APTRepository url = 'http://archive.ubuntu.com/ubuntu' components = ['main', 'universe', 'multiverse', 'restricted'] sources = APTSources([ APTRepository(url, 'xenial', components), APTRepository(url, 'xenial-updates', components), APTRepository(url, 'xenial-backports', components), APTRepository(url, 'xenial-proposed', components) ]) print([(package.package, package.version) for package in sources.get_packages_by_name('docker.io')]) [('docker.io', '1.10.3-0ubuntu6'), ('docker.io', '1.13.1-0ubuntu1~16.04.2'), ('docker.io', '17.03.2-0ubuntu2~16.04.1')] API Documentation","title":"Home"},{"location":"#python-apt-repo","text":"Python library to query APT repositories.","title":"python-apt-repo"},{"location":"#example","text":"from apt_repo import APTSources, APTRepository url = 'http://archive.ubuntu.com/ubuntu' components = ['main', 'universe', 'multiverse', 'restricted'] sources = APTSources([ APTRepository(url, 'xenial', components), APTRepository(url, 'xenial-updates', components), APTRepository(url, 'xenial-backports', components), APTRepository(url, 'xenial-proposed', components) ]) print([(package.package, package.version) for package in sources.get_packages_by_name('docker.io')]) [('docker.io', '1.10.3-0ubuntu6'), ('docker.io', '1.13.1-0ubuntu1~16.04.2'), ('docker.io', '17.03.2-0ubuntu2~16.04.1')]","title":"Example"},{"location":"#api-documentation","text":"","title":"API Documentation"},{"location":"apt_repo/","text":"apt_repo ReleaseFile ReleaseFile(self, content) Class that represents a Release file Arguments content (str) : the content of the Release file PackagesFile PackagesFile(self, content) Class that represents a Packages file Arguments content (str) : the content of the Packages file packages Returns all binary packages in this Packages files BinaryPackage BinaryPackage(self, content) Class that represents a binary Debian package Arguments content (str) : the section of the Packages file for this specific package APTRepository APTRepository(self, url, dist, components) Class that represents a single APT repository Arguments url (str) : the base URL of the repository dist (str) : the target distribution components (list) : the target components Examples APTRepository('http://archive.ubuntu.com/ubuntu', 'bionic', 'main') all_components Returns the all components of this repository components Returns the selected components of this repository packages Returns all binary packages of this repository Arguments arch (str) : the architecture to return packages for, default: 'amd64' release_file Returns the Release file of this repository from_sources_list_entry APTRepository.from_sources_list_entry(entry) Instantiates a new APTRepository object out of a sources.list file entry Examples APTRepository.from_sources_list_entry('deb http://archive.ubuntu.com/ubuntu bionic main') get_binary_packages_by_component APTRepository.get_binary_packages_by_component(self, component, arch='amd64') Returns all binary packages of this repository for a given component Arguments component (str) : the component to return packages for arch (str) : the architecture to return packages for, default: 'amd64' get_package APTRepository.get_package(self, name, version) Returns a single binary package Arguments name (str) : name of the package version (str) : version of the package get_package_url APTRepository.get_package_url(self, name, version) Returns the URL for a single binary package Arguments name (str) : name of the package version (str) : version of the package get_packages_by_name APTRepository.get_packages_by_name(self, name) Returns the list of available packages (and it's available versions) for a specific package name Arguments name (str) : name of the package APTSources APTSources(self, repositories) Class that represents a collection of APT repositories Arguments repositories (list) : list of APTRepository objects packages Returns all binary packages of all APT repositories get_package APTSources.get_package(self, name, version) Returns a single binary package Arguments name (str) : the name of the package version (str) : the version of the package get_package_url APTSources.get_package_url(self, name, version) Returns the URL of a single binary package Arguments name (str) : the name of the package version (str) : the version of the package get_packages_by_name APTSources.get_packages_by_name(self, name) Returns the list of available packages (and it's available versions) for a specific package name Arguments name (str) : name of the package","title":"API Documentation"}]}